@{
    ViewData["Title"] = "Users";
}
@section Scripts {
    <script>
        var store = new DevExpress.data.CustomStore({
            key: ["id"],
            errorHandler: function (error) { console.log(error) },
            load: function (loadOptions) 
            {
                var d = $.Deferred();
                Sotec.TableOP(
                    { type: 'S', tableName: 'Users', keys: { deleted: 0 } }, 
                    function (ret) {
                        d.resolve(ret, { totalCount: ret.length });
                    },
                    function (ret) {
                        DevExpress.ui.notify(ret, "error", 5000);
                        d.resolve();
                    }
                );
                return d.promise();
            },
            insert: function (values) 
            {
                var d = $.Deferred();

                values.createdUserID = 0;

                Sotec.TableOP(
                    { type: 'I', tableName: 'Users', values: values },
                    function (ret) {
                        Sotec.GetData({ url: "/User/SendWellcomeMail", data: { name: values.firstname, surname: values.lastname, email: values.email } }, function (ret) { });
                        d.resolve();
                    },
                    function (ret) {
                        DevExpress.ui.notify(ret, "error", 5000);
                        d.resolve();
                    }
                );
                return d.promise();
            },
            update: function (key, values) 
            {
                var d = $.Deferred();

                values.updatedUserID = @User.Claims.Where(x => x.Type == System.Security.Claims.ClaimTypes.NameIdentifier).First().Value;
                values.updatedDate = new Date();

                Sotec.TableOP(
                    { type: 'U', tableName: 'Users', values: values, keys: key },
                    function (ret) {
                        d.resolve();
                    },
                    function (ret) {
                        DevExpress.ui.notify(ret, "error", 5000);
                        d.resolve();
                    }
                );
                return d.promise();
            },
            remove: function (key) 
            {
                var d = $.Deferred();

                var values = {};
                values.updatedUserID = @User.Claims.Where(x => x.Type == System.Security.Claims.ClaimTypes.NameIdentifier).First().Value;
                values.updatedDate = new Date();
                values.deleted = 1;

                Sotec.GetData(
                    { url: "/User/CanDelete", data: { id: key.id } }, 
                    function (ret) { 
                        if (!ret) {
                            DevExpress.ui.notify("This user can not be deleted.", "error", 5000);
                            d.resolve();
                        }
                        else {
                            Sotec.TableOP(
                                { type: 'U', tableName: 'Users', keys: key, values: values },
                                function (ret) {
                                    d.resolve();
                                },
                                function (ret) {
                                    DevExpress.ui.notify(ret, "error", 5000);
                                    d.resolve();
                                }
                            );
                        }
                    }, 
                    function (ret) {
                        DevExpress.ui.notify(ret, "error", 5000);
                        d.resolve();
                    }
                );

                return d.promise();
            }
        });

        var dgTable = $('#dgTable').dxDataGrid({
            dataSource: store,
            columnsAutoWidth: true,
            showBorders: true,
            showRowLines: true,
            rowAlternationEnable: true,
            paging: {
                pageSize: 30,
            },
            loadPanel: {
                enabled: true
            },
            filterRow: {
                visible: true,
                applyFilter: "auto"
            },
            editing: {
                mode: "popup",
                allowUpdating: true,
                allowDeleting: true,
                allowAdding: true,
                useIcons: true
            },
            columns: [
                {
                    dataField: "firstname",
                    validationRules: [{ type: "required" }]
                }, {
                    dataField: "lastname",
                    validationRules: [{ type: "required" }]
                }, {
                    dataField: "company",
                    visible: false,
                }, {
                    dataField: "phone",
                    validationRules: [{
                        type: "async",
                        message: "Phone is required",
                        validationCallback(params) {
                            const d = $.Deferred();
                            if (params.data.type == 1 && params.value == null || params.value == "") {
                                d.reject("Phone is required");
                            }
                            else {
                                d.resolve();
                            }
                            return d.promise();
                        }
                    }]
                }, {
                    dataField: "fax"
                }, {
                    dataField: "npiNumber",
                    validationRules: [{
                        type: "async",
                        message: "NPI Number is required",
                        validationCallback(params) {
                            const d = $.Deferred();
                            if (params.data.type == 1 && params.value == null || params.value == "") {
                                d.reject("NPI Number is required");
                            }
                            else {
                                d.resolve();
                            }
                            return d.promise();
                        }
                    }]
                }, {
                    dataField: "dateOfBirth",
                    dataType: "date",
                    validationRules: [{ 
                        type: "async",
                        message: "Date of Birth is required",
                        validationCallback(params) {
                            const d = $.Deferred();
                            if (params.data.type == 2 && params.value == null || params.value == "") {
                                d.reject("Date of Birth is required");
                            }
                            else {
                                d.resolve();
                            }
                            return d.promise();
                        }
                    }]
                }, {
                    dataField: "gender",
                    visible: false,
                    lookup: {
                        dataSource: [
                            { key: "M", value: "Male" },
                            { key: "F", value: "Female" },
                            { key: "NB", value: "Non-Binary" },
                            { key: "TM", value: "Transgender Man" },
                            { key: "TW", value: "Transgender Woman" },
                            { key: "-", value: "Prefer Not to Disclose" }
                        ],
                        displayExpr: 'value',
                        valueExpr: 'key'
                    }
                }, {
                    dataField: "email",
                    validationRules: [{
                        type: 'required',
                    }, {
                        type: 'email',
                    }, {
                        type: 'async',
                        message: 'This email allready using.',
                        validationCallback(params) {
                            return $.ajax({
                                url: '/User/EmailValidations',
                                type: 'GET',
                                dataType: 'json',
                                contentType: 'application/json',
                                data: { id: params.data.id, email: params.value },
                            });
                        },
                    }]
                }, {
                    dataField: "password",
                    validationRules: [{ type: "required" }],
                    visible: false
                }, {
                    dataField: "type",
                    validationRules: [{ type: "required" }],
                    lookup: {
                        dataSource: [
                            { key: 0, value: "Admin" },
                            { key: 1, value: "Doctor" },
                            { key: 2, value: "Patient" },
                            { key: 3, value: "Lab.Doctor" },
                            { key: 4, value: "Lab.Technician" },
                            { key: 5, value: "Control User" },
                            { key: 6, value: "Durin Doctor" },
                            { key: 7, value: "R&D" }
                        ],
                        displayExpr: 'value',
                        valueExpr: 'key'
                    }
                }, {
                    dataField: "address",
                    visible: false,
                    validationRules: [{
                        type: "async",
                        message: "Address is required",
                        validationCallback(params) {
                            const d = $.Deferred();
                            if (params.data.type == 1 && params.value == null || params.value == "") {
                                d.reject("Address is required");
                            }
                            else {
                                d.resolve();
                            }
                            return d.promise();
                        }
                    }]
                }, {
                    dataField: "postalCode",
                    visible: false,
                    caption: "ZIP Code",
                    validationRules: [{
                        type: "async",
                        message: "ZIP Code is required",
                        validationCallback(params) {
                            const d = $.Deferred();
                            if (params.data.type == 1 && params.value == null || params.value == "") {
                                d.reject("ZIP Code is required");
                            }
                            else {
                                d.resolve();
                            }
                            return d.promise();
                        }
                    }]
                }, {
                    dataField: "countryCode",
                    visible: false,
                    caption: "Country",
                    lookup: {
                        dataSource: [
                            { key: "US", value: "US" }
                        ],
                        displayExpr: 'value',
                        valueExpr: 'key'
                    },
                    validationRules: [{
                        type: "async",
                        message: "Country is required",
                        validationCallback(params) {
                            const d = $.Deferred();
                            if (params.data.type == 1 && params.value == null || params.value == "") {
                                d.reject("Country is required");
                            }
                            else {
                                d.resolve();
                            }
                            return d.promise();
                        }
                    }]
                    }, {
                        dataField: "stateOrProvinceCode",
                        visible: false,
                        caption: "State",
                        lookup: {
                        dataSource: [
                            { "key": "AL", "value": "Alabama" },
                            { "key": "AK", "value": "Alaska" },
                            { "key": "AZ", "value": "Arizona" },
                            { "key": "AR", "value": "Arkansas" },
                            { "key": "CA", "value": "California" },
                            { "key": "CO", "value": "Colorado" },
                            { "key": "CT", "value": "Connecticut" },
                            { "key": "DE", "value": "Delaware" },
                            { "key": "FL", "value": "Florida" },
                            { "key": "GA", "value": "Georgia" },
                            { "key": "HI", "value": "Hawaii" },
                            { "key": "ID", "value": "Idaho" },
                            { "key": "IL", "value": "Illinois" },
                            { "key": "IN", "value": "Indiana" },
                            { "key": "IA", "value": "Iowa" },
                            { "key": "KS", "value": "Kansas" },
                            { "key": "KY", "value": "Kentucky" },
                            { "key": "LA", "value": "Louisiana" },
                            { "key": "ME", "value": "Maine" },
                            { "key": "MD", "value": "Maryland" },
                            { "key": "MA", "value": "Massachusetts" },
                            { "key": "MI", "value": "Michigan" },
                            { "key": "MN", "value": "Minnesota" },
                            { "key": "MS", "value": "Mississippi" },
                            { "key": "MO", "value": "Missouri" },
                            { "key": "MT", "value": "Montana" },
                            { "key": "NE", "value": "Nebraska" },
                            { "key": "NV", "value": "Nevada" },
                            { "key": "NH", "value": "New Hampshire" },
                            { "key": "NJ", "value": "New Jersey" },
                            { "key": "NM", "value": "New Mexico" },
                            { "key": "NY", "value": "New York" },
                            { "key": "NC", "value": "North Carolina" },
                            { "key": "ND", "value": "North Dakota" },
                            { "key": "OH", "value": "Ohio" },
                            { "key": "OK", "value": "Oklahoma" },
                            { "key": "OR", "value": "Oregon" },
                            { "key": "PA", "value": "Pennsylvania" },
                            { "key": "RI", "value": "Rhode Island" },
                            { "key": "SC", "value": "South Carolina" },
                            { "key": "SD", "value": "South Dakota" },
                            { "key": "TN", "value": "Tennessee" },
                            { "key": "TX", "value": "Texas" },
                            { "key": "UT", "value": "Utah" },
                            { "key": "VT", "value": "Vermont" },
                            { "key": "VA", "value": "Virginia" },
                            { "key": "WA", "value": "Washington" },
                            { "key": "WV", "value": "West Virginia" },
                            { "key": "WI", "value": "Wisconsin" },
                            { "key": "WY", "value": "Wyoming" }
                        ],
                        displayExpr: 'value',
                        valueExpr: 'key'
                    },
                    validationRules: [{
                        type: "async",
                        message: "State is required",
                        validationCallback(params) {
                            const d = $.Deferred();
                            if (params.data.type == 1 && params.value == null || params.value == "") {
                                d.reject("State is required");
                            }
                            else {
                                d.resolve();
                            }
                            return d.promise();
                        }
                    }]
                }, {
                    dataField: "city",
                    visible: false,
                    validationRules: [{
                        type: "async",
                        message: "City is required",
                        validationCallback(params) {
                            const d = $.Deferred();
                            if (params.data.type == 1 && params.value == null || params.value == "") {
                                d.reject("City is required");
                            }
                            else {
                                d.resolve();
                            }
                            return d.promise();
                        }
                    }]
                }, {
                    dataField: "MRN",
                    /*validationRules: [{
                        type: "async",
                        message: "MRN is required",
                        validationCallback(params) {
                            const d = $.Deferred();
                            if (params.data.type == 2 && params.value == null || params.value == "") {
                                d.reject("MRN is required");
                            }
                            else {
                                d.resolve();
                            }
                            return d.promise();
                        }
                    }]*/
                }, {
                    dataField: "status",
                    datatype: "boolean"
                }
            ]
        }).dxDataGrid('instance');
    </script>
}

<div class="row g-5 g-xl-8">
    <div class="col-xl-12">
        <div class="card card-xl-stretch mb-xl-8">
            <div class="card-body pt-5">
                <div id="dgTable"></div>
            </div>
        </div>
    </div>
</div>